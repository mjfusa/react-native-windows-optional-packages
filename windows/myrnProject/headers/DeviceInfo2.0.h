// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190730.2

#ifndef WINRT_DeviceInfo2_0_H
#define WINRT_DeviceInfo2_0_H
namespace winrt::DeviceInfo2
{
    struct IReactPackageProvider;
    struct ReactPackageProvider;
}
namespace winrt::impl
{
    template <> struct category<DeviceInfo2::IReactPackageProvider>
    {
        using type = interface_category;
    };
    template <> struct category<DeviceInfo2::ReactPackageProvider>
    {
        using type = class_category;
    };
    template <> struct name<DeviceInfo2::IReactPackageProvider>
    {
        static constexpr auto & value{ L"DeviceInfo2.IReactPackageProvider" };
    };
    template <> struct name<DeviceInfo2::ReactPackageProvider>
    {
        static constexpr auto & value{ L"DeviceInfo2.ReactPackageProvider" };
    };
    template <> struct guid_storage<DeviceInfo2::IReactPackageProvider>
    {
        static constexpr guid value{ 0x2A574026,0x6B0D,0x5310,{ 0x9F,0x01,0x9B,0x35,0x4A,0x99,0xE6,0xC8 } };
    };
    template <> struct default_interface<DeviceInfo2::ReactPackageProvider>
    {
        using type = DeviceInfo2::IReactPackageProvider;
    };
    template <> struct abi<DeviceInfo2::IReactPackageProvider>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <typename D>
    struct consume_DeviceInfo2_IReactPackageProvider
    {
    };
    template <> struct consume<DeviceInfo2::IReactPackageProvider>
    {
        template <typename D> using type = consume_DeviceInfo2_IReactPackageProvider<D>;
    };
}
#endif
